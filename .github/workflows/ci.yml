name: CI

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      rust_version:
        description: 'Rust version to test'
        required: false
        default: 'stable'
        type: choice
        options:
          - stable
          - beta
          - nightly
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      rust_version:
        description: 'Rust version to test'
        required: false
        default: 'stable'
        type: string
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean
      cache_key:
        description: 'Cache key for sharing build artifacts'
        required: false
        type: string
    outputs:
      test_passed:
        description: 'Whether all tests passed'
        value: ${{ jobs.test.outputs.result == 'success' }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - uses: Swatinem/rust-cache@v2
      with:
        key: fmt-${{ runner.os }}
    - name: Check formatting
      run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - uses: Swatinem/rust-cache@v2
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test
    if: ${{ !inputs.skip_tests }}
    outputs:
      result: ${{ steps.test_result.outputs.result }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce matrix size by skipping beta on Windows/macOS for faster CI
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.rust_version || matrix.rust }}
    - uses: Swatinem/rust-cache@v2
      with:
        key: ${{ inputs.cache_key || format('test-{0}-{1}', runner.os, matrix.rust) }}
        cache-directories: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
    - name: Install cargo-nextest
      run: cargo install cargo-nextest --locked
    - name: Build
      run: cargo build --all-features --all-targets
    - name: Run tests with nextest
      run: cargo nextest run --all-features || cargo nextest run --all-features --no-tests
    - name: Run doctests
      run: cargo test --doc --all-features || echo "No doctests found"
    - name: Set test result
      id: test_result
      if: always()
      run: echo "result=success" >> $GITHUB_OUTPUT
    
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # Required for OIDC
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
      with:
        key: coverage-${{ runner.os }}
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin --locked
    - name: Generate coverage
      run: cargo tarpaulin --out Xml --all-features --timeout 300
    - name: Upload coverage
      uses: codecov/codecov-action@v5
      with:
        files: ./cobertura.xml
        use_oidc: true
        fail_ci_if_error: true
        verbose: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      security-events: write
    steps:
    - uses: actions/checkout@v4
    - uses: rustsec/audit-check@v2.0.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        # Allow unmaintained dependencies that are indirect through GUI frameworks
        # RUSTSEC-2024-0384: instant crate (via iced framework)
        # RUSTSEC-2024-0436: paste crate (via ratatui/iced frameworks)
        ignore: RUSTSEC-2024-0384,RUSTSEC-2024-0436

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.75.0
    - uses: Swatinem/rust-cache@v2
    - name: Check MSRV
      run: cargo check --all-features