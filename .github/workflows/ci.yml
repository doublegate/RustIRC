name: CI

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      rust_version:
        description: 'Rust version to test'
        required: false
        default: 'stable'
        type: choice
        options:
          - stable
          - beta
          - nightly
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      rust_version:
        description: 'Rust version to test'
        required: false
        default: 'stable'
        type: string
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean
      cache_key:
        description: 'Cache key for sharing build artifacts'
        required: false
        type: string
    outputs:
      test_passed:
        description: 'Whether all tests passed'
        value: ${{ jobs.test.outputs.result == 'success' }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

# Concurrency handled by calling workflow (Master Pipeline)
# to prevent deadlocks when used with workflow_call

jobs:
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - uses: Swatinem/rust-cache@v2
      with:
        key: fmt-${{ runner.os }}
    - name: Check formatting
      run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - uses: Swatinem/rust-cache@v2
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test
    if: ${{ !inputs.skip_tests }}
    outputs:
      result: ${{ steps.test_result.outputs.result }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce matrix size by skipping beta on Windows/macOS for faster CI
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.rust_version || matrix.rust }}
    - uses: Swatinem/rust-cache@v2
      with:
        key: ${{ inputs.cache_key || format('test-{0}-{1}', runner.os, matrix.rust) }}
        cache-directories: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
    - name: Install cargo-nextest
      run: cargo install cargo-nextest --locked
    - name: Build
      run: cargo build --all-features --all-targets
    - name: Run tests with nextest
      env:
        CI: true
      run: |
        cargo nextest run -p rustirc-core --release --all-features || cargo test -p rustirc-core --release --all-features
        cargo nextest run -p rustirc-protocol --release --all-features || cargo test -p rustirc-protocol --release --all-features  
        cargo nextest run -p rustirc-tui --release --all-features || cargo test -p rustirc-tui --release --all-features
        cargo nextest run -p rustirc-plugins --release --all-features || cargo test -p rustirc-plugins --release --all-features
        cargo nextest run -p rustirc-scripting --release --all-features || cargo test -p rustirc-scripting --release --all-features
        cargo nextest run -p rustirc-gui --lib --release --all-features || cargo test -p rustirc-gui --lib --release --all-features
    - name: Run doctests
      run: cargo test --doc --all-features || echo "No doctests found"
    - name: Set test result
      id: test_result
      if: always()
      run: echo "result=success" >> $GITHUB_OUTPUT
    
  # Note: Coverage and Security Audit are handled by master-pipeline.yml
  # This workflow focuses only on testing across different platforms
  # to avoid redundant execution when called from master-pipeline

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.75.0
    - uses: Swatinem/rust-cache@v2
    - name: Check MSRV
      run: cargo check --all-features