name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-release:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            target: x86_64-apple-darwin
            artifact_name: rustirc-macos-amd64.tar.gz
            cross: false
          - os: macos-14
            target: aarch64-apple-darwin
            artifact_name: rustirc-macos-arm64.tar.gz
            cross: false
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            artifact_name: rustirc-windows-amd64.exe.zip
            cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rustirc-linux-amd64.tar.gz
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rustirc-linux-arm64.tar.gz
            cross: true

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install cross (Linux aarch64 only)
        if: matrix.cross == true
        run: cargo install cross --locked --version 0.2.5

      - name: Build (release)
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target "${{ matrix.target }}" --locked
          else
            cargo build --release --target "${{ matrix.target }}" --locked
          fi
          mkdir -p out
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            cp "target/${{ matrix.target }}/release/rustirc.exe" out/
            (cd out && 7z a "../${{ matrix.artifact_name }}" rustirc.exe)
          else
            cp "target/${{ matrix.target }}/release/rustirc" out/
            tar -C out -czf "${{ matrix.artifact_name }}" rustirc
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}  # unique per-target name
          path: ${{ matrix.artifact_name }}
          retention-days: 30

  create-release:
    name: Create GitHub Release
    needs: [build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: rustirc-*
          merge-multiple: true
          path: artifacts

      - name: Generate checksums
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release-assets
          shopt -s nullglob
          for f in artifacts/*.tar.gz artifacts/*.zip; do
            cp "$f" release-assets/
          done
          cd release-assets
          for f in *; do
            [ -f "$f" ] || continue
            if command -v shasum >/dev/null; then shasum -a 256 "$f" > "$f.sha256"; else sha256sum "$f" > "$f.sha256"; fi
          done

      - name: Create release (gh CLI)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ inputs.tag || github.event.inputs.tag }}
          PRERELEASE: ${{ inputs.prerelease || github.event.inputs.prerelease }}
        run: |
          set -euo pipefail
          gh release delete "$TAG_NAME" -y >/dev/null 2>&1 || true
          gh release create "$TAG_NAME" \
            --title "$TAG_NAME" \
            $([ "${PRERELEASE}" = "true" ] && echo "--prerelease") \
            --generate-notes
          gh release upload "$TAG_NAME" release-assets/* --clobber
