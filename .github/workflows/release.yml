name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      prerelease:
        required: false
        type: boolean

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build Release Artifacts (${{ matrix.os }}, ${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: rustirc-linux-amd64.tar.gz
            bin: rustirc
            pack: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: rustirc-linux-arm64.tar.gz
            bin: rustirc
            pack: tar.gz
          - os: macos-14
            target: x86_64-apple-darwin
            artifact: rustirc-macos-amd64.tar.gz
            bin: rustirc
            pack: tar.gz
          - os: macos-14
            target: aarch64-apple-darwin
            artifact: rustirc-macos-arm64.tar.gz
            bin: rustirc
            pack: tar.gz
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            artifact: rustirc-windows-amd64.exe.zip
            bin: rustirc.exe
            pack: zip

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - uses: Mozilla-Actions/sccache-action@v0.0.9

      - name: Linux cross toolchain (for aarch64 gnu)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build
        run: cargo build --release --locked --target ${{ matrix.target }} --bin rustirc

      - name: Package
        run: |
          set -e
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.pack }}" = "tar.gz" ]; then
            tar -czf ${{ matrix.artifact }} ${{ matrix.bin }}
          else
            powershell -Command "Compress-Archive -Path ${{ matrix.bin }} -DestinationPath ${{ matrix.artifact }}"
          fi
          echo "ASSET=$PWD/${{ matrix.artifact }}" >> $GITHUB_ENV

      - name: Upload artifact (unique name)
        uses: actions/upload-artifact@v4
        with:
          name: rel-${{ matrix.os }}-${{ matrix.target }}
          path: ${{ env.ASSET }}
          if-no-files-found: error
          retention-days: 7

  gh-release:
    name: Create GitHub Release
    needs: [ build-and-upload ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: rel-*
          merge-multiple: true

      - name: Create / Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag || github.ref_name }}
          prerelease: ${{ inputs.prerelease }}
          files: |
            *.tar.gz
            *.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
