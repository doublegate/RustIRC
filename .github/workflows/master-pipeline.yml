name: Master Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip running tests'
        type: boolean
        default: false
      skip_security:
        description: 'Skip security audit'
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

concurrency:
  group: master-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  # Fast validation (same as CI but single toolchain) â€” can be skipped
  smoke:
    if: ${{ inputs.skip_tests != true }}
    name: Smoke (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-14, windows-2022 ]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy
      - uses: Mozilla-Actions/sccache-action@v0.0.9
      - run: cargo build --all-features --all-targets --locked
      - run: cargo clippy --all-features --all-targets -- -D warnings
      - run: cargo test --all-features --all-targets --locked
      - name: sccache stats
        if: always()
        run: sccache --show-stats || true

  build-artifacts:
    name: Build Release Artifacts (${{ matrix.os }}, ${{ matrix.target }})
    needs: [ smoke ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rustirc-linux-amd64.tar.gz
            bin_name: rustirc
            pack: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rustirc-linux-arm64.tar.gz
            bin_name: rustirc
            pack: tar.gz
          - os: macos-14
            target: x86_64-apple-darwin
            artifact_name: rustirc-macos-amd64.tar.gz
            bin_name: rustirc
            pack: tar.gz
          - os: macos-14
            target: aarch64-apple-darwin
            artifact_name: rustirc-macos-arm64.tar.gz
            bin_name: rustirc
            pack: tar.gz
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            artifact_name: rustirc-windows-amd64.exe.zip
            bin_name: rustirc.exe
            pack: zip
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - uses: Mozilla-Actions/sccache-action@v0.0.9

      - name: Linux cross toolchain (for aarch64 gnu)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build (release)
        run: cargo build --release --locked --target ${{ matrix.target }} --bin rustirc

      - name: Package
        run: |
          set -e
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.pack }}" = "tar.gz" ]; then
            tar -czf ${{ matrix.artifact_name }} ${{ matrix.bin_name }}
          else
            powershell -Command "Compress-Archive -Path ${{ matrix.bin_name }} -DestinationPath ${{ matrix.artifact_name }}"
          fi
          echo "ASSET_PATH=$PWD/${{ matrix.artifact_name }}" >> $GITHUB_ENV

      - name: Upload packaged artifact (unique per job)
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.target }}
          path: ${{ env.ASSET_PATH }}
          if-no-files-found: error
          retention-days: 7

  release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Create GitHub Release
    needs: [ build-artifacts ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all packaged artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.tar.gz
            *.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  audit:
    if: ${{ inputs.skip_security != true }}
    name: Security Audit
    needs: [ smoke ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install cargo-audit (pinned)
        run: cargo install cargo-audit@0.20.2 --locked
      - name: Run cargo-audit (JSON)
        run: |
          set -e
          cargo audit --json > audit.json || true
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-json
          path: audit.json
          retention-days: 7
