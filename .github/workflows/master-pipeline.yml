name: Master Pipeline

on:
  push:
    branches: [ main ]
    tags: ['v*.*.*']
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        type: boolean
        default: false
      skip_security:
        type: boolean
        default: false
      skip_coverage:
        type: boolean
        default: false
      release_type:
        description: 'none|patch|minor|major'
        type: choice
        default: none
        options: [none, patch, minor, major]
      rust_version:
        description: 'Toolchain for reusable CI'
        type: choice
        default: stable
        options: [stable, beta, nightly]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SCCACHE_GHA_ENABLED: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  quick-checks:
    name: Quick Checks & Build
    runs-on: ubuntu-latest
    outputs:
      artifact_name: build-artifacts-Linux
      should_run_tests: ${{ steps.config.outputs.should_run_tests }}
      should_run_security: ${{ steps.config.outputs.should_run_security }}
      should_run_coverage: ${{ steps.config.outputs.should_run_coverage }}
      should_run_release: ${{ steps.config.outputs.should_run_release }}
      release_tag: ${{ steps.config.outputs.release_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Persist shell helpers
        shell: bash
        run: |
          echo "BASH_ENV=$RUNNER_TEMP/ci_helpers.sh" >> "$GITHUB_ENV"
          cat >"$RUNNER_TEMP/ci_helpers.sh" <<'EOF'
          run_with_timeout() {
            local duration="$1"; shift
            if command -v timeout >/dev/null 2>&1; then
              timeout "$duration" "$@"
            else
              perl -e "alarm $duration; exec @ARGV" "$@"
            fi
          }
          export -f run_with_timeout
          EOF

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Configure sccache (GHA with local fallback)
        id: configure_sccache
        shell: bash
        env:
          SCCACHE_ERROR_LOG: ${{ runner.temp }}/sccache.err.log
        run: |
          set -euo pipefail
          sccache_available=false
          rustc_wrapper=""
          if command -v sccache >/dev/null 2>&1; then
            if sccache --start-server >/dev/null 2>>"$SCCACHE_ERROR_LOG"; then
              if run_with_timeout 10s sccache --show-stats >/dev/null 2>&1; then
                sccache_available=true
                rustc_wrapper=sccache
              else
                echo "Degraded GHA backend, falling back to local disk cache"
                echo "SCCACHE_GHA_ENABLED=false" >> "$GITHUB_ENV"
                echo "SCCACHE_DIR=$HOME/.cache/sccache" >> "$GITHUB_ENV"
                echo "SCCACHE_CACHE_SIZE=10G" >> "$GITHUB_ENV"
                sccache_available=true
                rustc_wrapper=sccache
              fi
            else
              echo "GHA backend unhealthy; local disk fallback"
              echo "SCCACHE_GHA_ENABLED=false" >> "$GITHUB_ENV"
              echo "SCCACHE_DIR=$HOME/.cache/sccache" >> "$GITHUB_ENV"
              echo "SCCACHE_CACHE_SIZE=10G" >> "$GITHUB_ENV"
              sccache_available=true
              rustc_wrapper=sccache
            fi
          fi
          echo "sccache_available=$sccache_available" >> "$GITHUB_OUTPUT"
          echo "rustc_wrapper=$rustc_wrapper" >> "$GITHUB_OUTPUT"

      # Leave Swatinem to generate OS-appropriate keys (no cross-OS key injection)
      - uses: Swatinem/rust-cache@v2

      - name: rustfmt
        run: cargo fmt --all -- --check

      - name: clippy (with fallback)
        shell: bash
        env:
          RUSTC_WRAPPER: ${{ steps.configure_sccache.outputs.rustc_wrapper }}
        run: |
          if [ "${{ steps.configure_sccache.outputs.sccache_available }}" = "true" ]; then
            if ! run_with_timeout 600s cargo clippy --all-targets --all-features -- -D warnings; then
              unset RUSTC_WRAPPER; run_with_timeout 600s cargo clippy --all-targets --all-features -- -D warnings
            fi
          else
            run_with_timeout 600s cargo clippy --all-targets --all-features -- -D warnings
          fi

      - name: Prime build cache (release)
        shell: bash
        env:
          RUSTC_WRAPPER: ${{ steps.configure_sccache.outputs.rustc_wrapper }}
        run: |
          if [ -n "${RUSTC_WRAPPER:-}" ]; then
            if ! run_with_timeout 900s cargo build --all-features --all-targets --release; then
              unset RUSTC_WRAPPER; run_with_timeout 900s cargo build --all-features --all-targets --release
            fi
          else
            run_with_timeout 900s cargo build --all-features --all-targets --release
          fi

      - name: Upload build artifacts (Linux only, used later for packaging)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-Linux
          path: |
            target/release/
            target/debug/
          retention-days: 1
          compression-level: 0

      - name: Configure pipeline toggles
        id: config
        shell: bash
        run: |
          tests=true; security=true; coverage=false; release=false; tag=""
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ${{ inputs.skip_tests }} && tests=false || true
            ${{ inputs.skip_security }} && security=false || true
            ${{ inputs.skip_coverage }} && coverage=false || true
            if [ "${{ inputs.release_type }}" != "none" ]; then release=true; fi
          fi
          echo "should_run_tests=$tests"       >> "$GITHUB_OUTPUT"
          echo "should_run_security=$security" >> "$GITHUB_OUTPUT"
          echo "should_run_coverage=$coverage" >> "$GITHUB_OUTPUT"
          echo "should_run_release=$release"   >> "$GITHUB_OUTPUT"
          echo "release_tag=$tag"              >> "$GITHUB_OUTPUT"

  test-matrix:
    name: Test Matrix
    needs: quick-checks
    if: needs.quick-checks.outputs.should_run_tests == 'true'
    uses: ./.github/workflows/ci.yml
    with:
      rust_version: ${{ inputs.rust_version || 'stable' }}
      # do NOT pass cross-OS cache keys or artifact names
    secrets: inherit

  # â€¦ (documentation & security jobs unchanged, but keep Swatinem default keys)

  build-artifacts:
    name: Build Release Artifacts
    needs: [quick-checks, test-matrix]
    if: needs.test-matrix.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            target: x86_64-apple-darwin
            artifact_name: rustirc-macos-amd64.tar.gz
            cross: false
          - os: macos-14
            target: aarch64-apple-darwin
            artifact_name: rustirc-macos-arm64.tar.gz
            cross: false
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            artifact_name: rustirc-windows-amd64.exe.zip
            cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rustirc-linux-amd64.tar.gz
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rustirc-linux-arm64.tar.gz
            cross: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross (for aarch64 linux)
        if: matrix.cross == true
        run: cargo install cross --version 0.2.5 --locked

      - uses: Swatinem/rust-cache@v2

      - name: Build release binary
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --locked
          else
            cargo build --release --target ${{ matrix.target }} --locked
          fi
          mkdir -p out
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            cp target/${{ matrix.target }}/release/rustirc.exe out/
            (cd out && 7z a "../${{ matrix.artifact_name }}" rustirc.exe)
          else
            cp target/${{ matrix.target }}/release/rustirc out/
            tar -C out -czf "${{ matrix.artifact_name }}" rustirc
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}
          retention-days: 30

  release:
    name: Create Release
    needs: [quick-checks, test-matrix, build-artifacts]
    if: needs.test-matrix.result == 'success' && needs.quick-checks.outputs.should_run_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts from this run
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare assets & checksums
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -maxdepth 2 -print0 | xargs -0 -I{} cp {} release-assets/
          cd release-assets
          for f in *; do
            [ -f "$f" ] || continue
            if command -v shasum >/dev/null; then shasum -a 256 "$f" > "$f.sha256"; else sha256sum "$f" > "$f.sha256"; fi
          done

      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          tag_name: ${{ needs.quick-checks.outputs.release_tag || github.ref_name }}
          files: |
            release-assets/*
