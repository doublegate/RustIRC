name: Master Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Mondays at 6 AM UTC
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: 'false'
        type: boolean
      run_security_audit:
        description: 'Run security audit'
        required: false
        default: 'true'
        type: boolean

env:
  CARGO_TERM_COLOR: always

# Allow only one concurrent deployment per branch/tag
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build:
    name: Build & Test Matrix
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cache_key: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cache_key: linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cache_key: windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            cache_key: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            cache_key: macos-arm64
    
    runs-on: ${{ matrix.os }}
    outputs:
      test_results: ${{ steps.test_results.outputs.passed }}
      build_artifacts: ${{ steps.build_info.outputs.artifacts }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup timeout and helpers
      shell: bash
      run: |
        cat > "$RUNNER_TEMP/ci_helpers.sh" << 'EOF'
        #!/bin/bash
        run_with_timeout() {
          local duration="$1"
          shift
          if command -v timeout >/dev/null 2>&1; then
            timeout "$duration" "$@"
          else
            # macOS fallback using perl
            perl -e "alarm $duration; exec @ARGV" "$@"
          fi
        }
        export -f run_with_timeout
        EOF
        echo "BASH_ENV=$RUNNER_TEMP/ci_helpers.sh" >> $GITHUB_ENV

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup cross-compilation (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Setup sccache
      shell: bash
      run: |
        # Install sccache if not available
        if ! command -v sccache >/dev/null 2>&1; then
          echo "Installing sccache..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            curl -L https://github.com/mozilla/sccache/releases/download/v0.8.2/sccache-v0.8.2-x86_64-unknown-linux-musl.tar.gz | tar xz
            sudo mv sccache-*/sccache /usr/local/bin/
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            curl -L https://github.com/mozilla/sccache/releases/download/v0.8.2/sccache-v0.8.2-x86_64-pc-windows-msvc.tar.gz | tar xz
            mv sccache-*/sccache.exe /usr/bin/
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            curl -L https://github.com/mozilla/sccache/releases/download/v0.8.2/sccache-v0.8.2-x86_64-apple-darwin.tar.gz | tar xz
            sudo mv sccache-*/sccache /usr/local/bin/
          fi
        fi
        
        # Test sccache availability with comprehensive HTTP 400 resilience
        if sccache --start-server >/dev/null 2>&1; then
          echo "✅ sccache server started successfully"
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        else
          echo "⚠️ sccache server failed to start (HTTP 400 GitHub cache service outage)"
          echo "Configuring local disk cache fallback..."
          echo "SCCACHE_GHA_ENABLED=false" >> $GITHUB_ENV
          echo "SCCACHE_DIR=$HOME/.cache/sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=2G" >> $GITHUB_ENV
          mkdir -p "$HOME/.cache/sccache"
          
          # Retry with local cache
          if sccache --start-server >/dev/null 2>&1; then
            echo "✅ sccache local disk cache started successfully"
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          else
            echo "❌ sccache completely failed, proceeding without cache"
          fi
        fi

    - name: Format check
      shell: bash
      run: |
        if [ -n "${RUSTC_WRAPPER:-}" ] && command -v sccache >/dev/null 2>&1; then
          if ! sccache --start-server >/dev/null 2>&1; then
            echo "sccache failed, unsetting RUSTC_WRAPPER"
            unset RUSTC_WRAPPER
          fi
        fi
        run_with_timeout 300 cargo fmt --all --check

    - name: Build all targets
      shell: bash
      run: |
        if [ -n "${RUSTC_WRAPPER:-}" ] && command -v sccache >/dev/null 2>&1; then
          if ! sccache --start-server >/dev/null 2>&1; then
            echo "sccache failed, unsetting RUSTC_WRAPPER"
            unset RUSTC_WRAPPER
          fi
        fi
        run_with_timeout 1200 cargo build --target ${{ matrix.target }} --all-targets --release

    - name: Clippy analysis
      shell: bash
      run: |
        if [ -n "${RUSTC_WRAPPER:-}" ] && command -v sccache >/dev/null 2>&1; then
          if ! sccache --start-server >/dev/null 2>&1; then
            echo "sccache failed, unsetting RUSTC_WRAPPER"
            unset RUSTC_WRAPPER
          fi
        fi
        run_with_timeout 600 cargo clippy --target ${{ matrix.target }} --all-targets --all-features -- -D warnings

    - name: Run tests
      if: ${{ inputs.skip_tests != 'true' && matrix.target != 'aarch64-unknown-linux-gnu' && matrix.target != 'aarch64-apple-darwin' }}
      shell: bash
      run: |
        if [ -n "${RUSTC_WRAPPER:-}" ] && command -v sccache >/dev/null 2>&1; then
          if ! sccache --start-server >/dev/null 2>&1; then
            echo "sccache failed, unsetting RUSTC_WRAPPER"
            unset RUSTC_WRAPPER
          fi
        fi
        run_with_timeout 600 cargo test --target ${{ matrix.target }}

    - name: Run doc tests
      if: ${{ inputs.skip_tests != 'true' && matrix.target != 'aarch64-unknown-linux-gnu' && matrix.target != 'aarch64-apple-darwin' }}
      shell: bash
      run: |
        if [ -n "${RUSTC_WRAPPER:-}" ] && command -v sccache >/dev/null 2>&1; then
          if ! sccache --start-server >/dev/null 2>&1; then
            echo "sccache failed, unsetting RUSTC_WRAPPER"
            unset RUSTC_WRAPPER
          fi
        fi
        run_with_timeout 600 cargo test --target ${{ matrix.target }} --doc

    - name: Prepare build artifacts
      shell: bash
      run: |
        mkdir -p artifacts
        
        # Find and copy binaries based on target
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          find target/${{ matrix.target }}/release -name "*.exe" -type f -exec cp {} artifacts/ \;
        else
          find target/${{ matrix.target }}/release -maxdepth 1 -type f -perm /u+x ! -name "*.d" -exec cp {} artifacts/ \; 2>/dev/null || true
        fi
        
        # List artifacts found
        if [ "$(ls -A artifacts/ 2>/dev/null)" ]; then
          echo "Build artifacts found:"
          ls -la artifacts/
        else
          echo "No build artifacts found"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: rustirc-${{ matrix.cache_key }}-${{ github.ref_name }}
        path: artifacts/*
        retention-days: 30

    - name: Set test results output
      id: test_results
      shell: bash
      run: echo "passed=true" >> $GITHUB_OUTPUT

    - name: Set build info output
      id: build_info
      shell: bash
      run: |
        if [ "$(ls -A artifacts/ 2>/dev/null)" ]; then
          echo "artifacts=true" >> $GITHUB_OUTPUT
        else
          echo "artifacts=false" >> $GITHUB_OUTPUT
        fi

    - name: sccache statistics
      shell: bash
      run: |
        if command -v sccache >/dev/null 2>&1; then
          echo "📊 sccache statistics:"
          sccache --show-stats || echo "No stats available"
        fi

  security-audit:
    name: Security Audit
    if: ${{ inputs.run_security_audit != 'false' }}
    uses: ./.github/workflows/security-audit.yml
    with:
      ignore_advisories: 'RUSTSEC-2024-0384,RUSTSEC-2024-0436'
      create_issues: ${{ github.event_name != 'pull_request' }}
    permissions:
      contents: read
      issues: write
      security-events: write
      actions: read

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup timeout and helpers
      run: |
        cat > "$RUNNER_TEMP/ci_helpers.sh" << 'EOF'
        #!/bin/bash
        run_with_timeout() {
          local duration="$1"
          shift
          if command -v timeout >/dev/null 2>&1; then
            timeout "$duration" "$@"
          else
            # macOS fallback using perl
            perl -e "alarm $duration; exec @ARGV" "$@"
          fi
        }
        export -f run_with_timeout
        EOF
        echo "BASH_ENV=$RUNNER_TEMP/ci_helpers.sh" >> $GITHUB_ENV

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly

    - name: Setup sccache
      run: |
        if ! command -v sccache >/dev/null 2>&1; then
          echo "Installing sccache..."
          curl -L https://github.com/mozilla/sccache/releases/download/v0.8.2/sccache-v0.8.2-x86_64-unknown-linux-musl.tar.gz | tar xz
          sudo mv sccache-*/sccache /usr/local/bin/
        fi
        
        # Test sccache availability with HTTP 400 resilience
        if sccache --start-server >/dev/null 2>&1; then
          echo "sccache server started successfully"
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        else
          echo "sccache server failed to start, continuing without cache"
        fi

    - name: Install cargo-tarpaulin
      run: |
        if ! command -v cargo-tarpaulin >/dev/null 2>&1; then
          if [ -n "${RUSTC_WRAPPER:-}" ] && command -v sccache >/dev/null 2>&1; then
            if ! sccache --start-server >/dev/null 2>&1; then
              echo "sccache failed, unsetting RUSTC_WRAPPER"
              unset RUSTC_WRAPPER
            fi
          fi
          run_with_timeout 300 cargo install cargo-tarpaulin
        fi

    - name: Generate coverage report
      run: |
        if [ -n "${RUSTC_WRAPPER:-}" ] && command -v sccache >/dev/null 2>&1; then
          if ! sccache --start-server >/dev/null 2>&1; then
            echo "sccache failed, unsetting RUSTC_WRAPPER"
            unset RUSTC_WRAPPER
          fi
        fi
        run_with_timeout 900 cargo tarpaulin --out xml --engine llvm

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: cobertura.xml
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup timeout and helpers
      run: |
        cat > "$RUNNER_TEMP/ci_helpers.sh" << 'EOF'
        #!/bin/bash
        run_with_timeout() {
          local duration="$1"
          shift
          if command -v timeout >/dev/null 2>&1; then
            timeout "$duration" "$@"
          else
            # macOS fallback using perl
            perl -e "alarm $duration; exec @ARGV" "$@"
          fi
        }
        export -f run_with_timeout
        EOF
        echo "BASH_ENV=$RUNNER_TEMP/ci_helpers.sh" >> $GITHUB_ENV

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Setup sccache
      run: |
        if ! command -v sccache >/dev/null 2>&1; then
          echo "Installing sccache..."
          curl -L https://github.com/mozilla/sccache/releases/download/v0.8.2/sccache-v0.8.2-x86_64-unknown-linux-musl.tar.gz | tar xz
          sudo mv sccache-*/sccache /usr/local/bin/
        fi
        
        # Test sccache availability with HTTP 400 resilience
        if sccache --start-server >/dev/null 2>&1; then
          echo "sccache server started successfully"
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        else
          echo "sccache server failed to start, continuing without cache"
        fi

    - name: Install cargo-criterion
      run: |
        if ! command -v cargo-criterion >/dev/null 2>&1; then
          if [ -n "${RUSTC_WRAPPER:-}" ] && command -v sccache >/dev/null 2>&1; then
            if ! sccache --start-server >/dev/null 2>&1; then
              echo "sccache failed, unsetting RUSTC_WRAPPER"
              unset RUSTC_WRAPPER
            fi
          fi
          run_with_timeout 300 cargo install cargo-criterion
        fi

    - name: Run benchmarks
      run: |
        if [ -n "${RUSTC_WRAPPER:-}" ] && command -v sccache >/dev/null 2>&1; then
          if ! sccache --start-server >/dev/null 2>&1; then
            echo "sccache failed, unsetting RUSTC_WRAPPER"
            unset RUSTC_WRAPPER
          fi
        fi
        run_with_timeout 600 cargo criterion || echo "Benchmarks completed with warnings"

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          rustirc/rustirc:latest
          rustirc/rustirc:${{ github.ref_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, security-audit, coverage]
    if: startsWith(github.ref, 'refs/tags/') && needs.build.outputs.test_results == 'true'
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Prepare release assets
      run: |
        cd release-artifacts
        # Create release directory
        mkdir -p ../release-assets
        
        # Process each artifact directory
        for artifact_dir in */; do
          echo "Processing artifact directory: $artifact_dir"
          if [ -d "$artifact_dir" ]; then
            cd "$artifact_dir"
            # Find files (not directories) and copy them
            find . -maxdepth 1 -type f -exec cp {} "../../release-assets/" \;
            cd ..
          fi
        done
        
        cd ..
        echo "Release assets prepared:"
        ls -la release-assets/ || echo "No release assets found"

    - name: Get release notes from VERSION file
      id: release_notes
      run: |
        if [ -f "VERSION" ]; then
          # Extract version and release notes from VERSION file
          version=$(head -n 1 VERSION)
          # Get everything after the version line as release notes
          tail -n +3 VERSION > release_notes.md
          echo "version=$version" >> $GITHUB_OUTPUT
        else
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "Release ${{ github.ref_name }}" > release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate release summary
      run: |
        echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "**Security Audit:** ✅ Completed" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage:** ✅ Generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Release Assets" >> $GITHUB_STEP_SUMMARY
        if [ -d "release-assets" ] && [ "$(ls -A release-assets/)" ]; then
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -la release-assets/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "No binary assets included in this release." >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build, security-audit, coverage, performance]
    if: always()
    
    steps:
    - name: Pipeline summary
      run: |
        echo "## 🚀 RustIRC Master Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Ref:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Status" >> $GITHUB_STEP_SUMMARY
        echo "- Build & Test Matrix: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Audit: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "- Coverage: ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY